# services:
#   # bikin nama dari contaienr  atua service nya
#   const_a:
#     # harus di tab terlebih dahili ntar dikiran bikki container baru
#     image: busybox:lates
#     command: "sleep 1d"
#     networks:
#       # bisa lebih dari 1 makanya dibkin kaya dibawah
#       - "app-net"
#   const_b:
#     # harus di tab terlebih dahili ntar dikiran bikki container baru
#     image: busybox:lates
#     command: "sleep 1d"
#     networks:
#       # bisa lebih dari 1 makanya dibkin kaya dibawah
#       - "app-net"
# networks:
#   app-net:
#     # ada externak true sudah dibuat
#
#     external: true
# volume:
# #biar nggak masuk ke container tambahin opsi menggunakan -d (docker compose up -d)
# #docker compose inspect <>
# #docker compose ps
# #docker compose up -d
# volume agar data nya persistance

#  percobaaan 2
# services:
#   const_a:
#     image: busybox:latest
#     command: "sleep 1d"
#     networks:
#       - app-net
#   const_b:
#     image: busybox:latest
#     command: "sleep 1d"
#     networks:
#       - app-net
# networks:
#   app-net:
# volume:
#   private-data:

# percobaan 3
# services:
#   postgres:
#     image: postgres:latest
#     environment:
#       - POSTGRES_PASSWORD=350c8d6964c6a208
#       - POSTGRES_USER=habib
#       - POSTGRES_DB=Project
#     # env_file:
#     #   - fileName
#     volumes:
#       - pg-data:/var/lib/postgresql/data
#       # por forwardig yang dimana kan coitanier termausk isolasi, mdan 8008 itu kan dilau container makan dihubungka dengan prot forwading
#     ports:
#       - 8008:5432
#     networks:
#       - my-net

#   pgc:
#     build: .
#     networks:
#       - my-net
# networks:
#   my-net:
# volumes:
#   pg-data:


# version: "3.9"

# services:
#   postgres:
#     image: postgres:17.6-alpine3.21
#     environment:
#       - POSTGRES_USER=habib
#       - POSTGRES_PASSWORD=kuningan1
#       - POSTGRES_DB=Project
#     ports:
#       - "5432:5432"
#     volumes:
#       - pg-data:/var/lib/postgresql/data
#     networks:
#       - my-net
    
#   backend:
#     image: ghcr.io/habibmrizki/backend-tickitz:latest
#     env_file:
#       - ./.env
#     volumes:
#       - ./.env:/app/.env
#       - /home/habib/Documents/Koda-3/back-end-tickitz:/app
#     networks:
#       - my-net
#     ports:
#       - "3000:3000"
#     depends_on:
#       pg-db:
#         condition: service_healthy
      
#   rdb:
#     image: redis:8.2-alpine
#     env_file:
#       - ./.env
#     volumes:
#       - redis-data:/data
#     networks:
#       - my-net
#     ports:
#       - "6378:6379"

#   frontend:
#     image: 
#     build: ../Frond-end tickitz
#     depends_on:
#       - backend
#     ports:
#       - "3000:80"
#     env_file:
#       - ../Frond-end tickitz/.env
#     networks:
#       - my-net


# networks:
#   my-net:

# volumes:
#   pg-data:


services:
  postgres:
    image: postgres:17.6-alpine3.21
    environment:
      - POSTGRES_USER=habib
      - POSTGRES_DB=Project
    ports:
      - 5432:5432
    volumes:
      - pg:/var/lib/postgresql/data
    networks:
      - my-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    
  backend:
    image: ghcr.io/habibmrizki/backend-tickitz:latest
    env_file:
      - ./.env
    volumes:
      - ./.env:/app/.env
    networks:
      - my-net
    ports:
      - 3000:3000
    depends_on:
      postgres:
        condition: service_healthy
      
  rdb:
    image: redis:8.2-alpine
    env_file:
      - ./.env
    volumes:
      - redis-data:/data
    networks:
      - my-net
    ports:
      - 6378:6379

  frontend:
    image: ghcr.io/habibmrizki/tickitz:latest
    ports:
      - 8080:80
    env_file:
      - ../Frond-end tickitz/.env
    networks:
      - my-net

networks:
  my-net:

volumes:
  pg:
    external: true
  redis-data:
    external: true
